#compdef logjam
# vim: syntax=zsh ts=2 sw=2 et

# zsh tab-completion for logjam.
# currently only a proof of concept.


# XXX this could be autogenerated, but the best behavior would be
# to query logjam (as subcommand does below) and build the list that way.
_logjam() {
  _arguments \
    '--help[show help]' \
    '--version[show version]' \
    '--quiet[say less]' \
    '--username[specify user]' \
    '--password[specify password]' \
    '--postas[specify user to post as]' \
    '--edit[use default editor to edit post]' \
    '*::subcommand:_logjam_subcommand'
}

(( $+functions[_logjam_subcommand] )) ||
_logjam_subcommand() {

  # all right, this next bit is gross:
  # read the output of the command, split into an array,
  # then the regexp transforms this:
  # '  checkfriends  Efficiently check friends list for updates.'
  # into this:
  # 'checkfriends:efficiently check friends list for updates'
  (( $+_logjam_subcommands )) || _logjam_subcommands=(
    ${${(f)"$(logjam --list-subcommands)"}/(#b) #([a-z]##) #([A-Z])#(*)/$match[1]:${match[2]:l}${match[3]%.}}
  )
  if (( CURRENT == 1 )); then
    _describe 'logjam subcommand' _logjam_subcommands
  else
    cmd=_logjam_$words[1]
    if (( $#cmd )); then
      _call_function ret $cmd || _message -r "bar"
    else
      _message -r "unknown command: $words[1]"
    fi
    return ret
  fi
}

(( $+functions[_logjam_offline] )) ||
_logjam_offline() {
  _message -r "messages don't show unless i have the -r flag?"
}

_logjam "$@"
